#!/usr/bin/env python
#
#    Copyright (C) 2008  Gaudenz Steinlin <gaudenz@soziologie.ch>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
ranking_viewer - application to view a ranking in full screen (for projector display)
"""

import wx
import wx.html
import wx.lib.anchors

from bosco.gui import UpdateableHtmlPanel
from bosco.util import load_config

class SpeakerFrame(wx.Frame):
    """Rotates through a list of rankings in full screen."""
    
    def __init__(self, parent, event, observer):
        """
        @param event: object of class Event
        """

        super(type(self), self).__init__(parent)
        
        self._event = event
        self._observer = observer
        
        panel = wx.Panel(self)
        panel.SetAutoLayout(True)

        list_box = wx.ListBox(panel,
                              style = wx.LB_SINGLE | wx.LB_SORT)
        for (desc, r) in event.list_rankings():
            list_box.Append(desc, event.format_ranking([r]))
        self.Bind(wx.EVT_LISTBOX, self.ChangeRanking, list_box)

        self._ranking_panel = UpdateableHtmlPanel(panel)
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(list_box, False, wx.EXPAND)
        sizer.Add(self._ranking_panel, True, wx.EXPAND)
        sizer.Fit(panel)
        panel.SetSizer(sizer)
        
        self.Show(True)

    def ChangeRanking(self, event):

        cursor = wx.BusyCursor()

        # unregister rankable object
        if self._ranking_panel.content is not None:
            for r in self._ranking_panel.content.rankings:
                try:
                    self._observer.unregister(self._ranking_panel, r.rankable)
                except KeyError:
                    # don't fail if you can't unregister, possibly registration
                    # never occured due to an Exception
                    pass
                
        list_box = event.GetEventObject()
        data = list_box.GetClientData(list_box.GetSelection())
        self._ranking_panel.content = data

        # register rankable object
        for r in data.rankings:
            self._observer.register(self._ranking_panel, r.rankable)
            
        del cursor
        
if __name__ == '__main__':

    conf = load_config()

    # add EventObserver to cache for automatic updates
    conf.cache.set_observer(conf.observer)
    
    app = wx.App()
    frame = SpeakerFrame(None, conf.event, conf.observer)
    app.MainLoop()

    conf.cache.remove_observer()
    conf.observer.stop()
