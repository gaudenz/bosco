#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon May  5 02:21:17 2008

import wx
import wx.grid

from datetime import timedelta, datetime

import conf
from editor import RunSelector, RunEditor, TeamEditor
# begin wxGlade: extracode
# end wxGlade



class TeamPanel(wx.Panel):
    def __init__(self, editor, *args, **kwds):
        # begin wxGlade: TeamPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.label_11 = wx.StaticText(self, -1, "Select Team:")
        self.team_combo = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN)
        self.validation = wx.StaticText(self, -1, "not yet finished")
        self.label_9 = wx.StaticText(self, -1, "Team Score:")
        self.score = wx.StaticText(self, -1, "Runs: 41, Time:23:34:76")
        self.run_grid = wx.grid.Grid(self, -1, size=(1, 1))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.ChangeTeam, self.team_combo)
        # end wxGlade

        self.editor = editor
        self.editor.add_observer(self)
        
        for t in editor.get_teamlist():
            self.team_combo.Append(t[1], t[0])

        self.update(self.editor, None)

    def __set_properties(self):
        # begin wxGlade: TeamPanel.__set_properties
        self.team_combo.SetMinSize((300, 27))
        self.validation.SetForegroundColour(wx.Colour(255, 0, 0))
        self.validation.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.score.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_grid.CreateGrid(0, 8)
        self.run_grid.EnableEditing(0)
        self.run_grid.EnableDragColSize(0)
        self.run_grid.EnableDragRowSize(0)
        self.run_grid.EnableDragGridSize(0)
        self.run_grid.SetColLabelValue(0, "Run ID")
        self.run_grid.SetColLabelValue(1, "Course")
        self.run_grid.SetColLabelValue(2, "Runner")
        self.run_grid.SetColLabelValue(3, "SI-Card")
        self.run_grid.SetColLabelValue(4, "Start")
        self.run_grid.SetColLabelValue(5, "Finish")
        self.run_grid.SetColLabelValue(6, "Validation")
        self.run_grid.SetColLabelValue(7, "Score")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TeamPanel.__do_layout
        sizer_20 = wx.BoxSizer(wx.VERTICAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22.Add(self.label_11, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        sizer_22.Add(self.team_combo, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
        sizer_20.Add(sizer_22, 0, wx.EXPAND, 0)
        label_6_copy_2 = wx.StaticText(self, -1, "Team Validation:")
        sizer_21.Add(label_6_copy_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        sizer_21.Add(self.validation, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_21.Add(self.label_9, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        sizer_21.Add(self.score, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        sizer_20.Add(sizer_21, 0, wx.EXPAND, 0)
        sizer_20.Add(self.run_grid, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_20)
        sizer_20.Fit(self)
        # end wxGlade

    def update(self, observable, event):
        busy = wx.BusyCursor()

        try:
            self.validation.SetLabel(self.editor.validation)
            self.score.SetLabel(self.editor.score)

            runs = self.editor.runs
            grid_size = self.run_grid.GetNumberRows()
            if len(runs) > grid_size:
                self.run_grid.AppendRows(numRows = len(runs) - grid_size)
            elif len(runs) < grid_size:
                self.run_grid.DeleteRows(numRows = grid_size - len(runs))
            
            for row, r in enumerate(runs):
                for col, v in enumerate(r):
                    self.run_grid.SetCellValue(row, col, v)
                
            self.run_grid.AutoSize()
            self.Layout()
        finally:
            del busy

    def ChangeTeam(self, event): # wxGlade: TeamPanel.<event_handler>
        team = self.team_combo.GetClientData(self.team_combo.GetSelection())
        self.editor.load(team)

# end of class TeamPanel


class RunEditorFrame(wx.Frame):
    def __init__(self, run_selector, run_editor, *args, **kwds):
        # begin wxGlade: RunEditorFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook = wx.Notebook(self, -1, style=0)
        self.readout_page = wx.Panel(self.notebook, -1)
        self.main_page = wx.Panel(self.notebook, -1)
        self.sizer_8_staticbox = wx.StaticBox(self.main_page, -1, "Runner")
        self.sizer_2_staticbox = wx.StaticBox(self.main_page, -1, "Run")
        self.sizer_16_staticbox = wx.StaticBox(self.main_page, -1, "Punches")
        self.sizer_11_staticbox = wx.StaticBox(self.readout_page, -1, "Runner Information")
        self.sizer_17_staticbox = wx.StaticBox(self.readout_page, -1, "Validation")
        self.sizer_14_staticbox = wx.StaticBox(self.readout_page, -1, "Run Information")
        self.sizer_7_staticbox = wx.StaticBox(self.main_page, -1, "Select Run")
        self.statusbar = self.CreateStatusBar(2, 0)
        self.team_combo = wx.ComboBox(self.main_page, -1, choices=[], style=wx.CB_DROPDOWN)
        self.button_2 = wx.Button(self.main_page, wx.ID_APPLY, "")
        self.runner_combo = wx.ComboBox(self.main_page, -1, choices=[], style=wx.CB_DROPDOWN)
        self.button_4 = wx.Button(self.main_page, wx.ID_REVERT_TO_SAVED, "")
        self.run_combo = wx.ComboBox(self.main_page, -1, choices=[], style=wx.CB_DROPDOWN)
        self.add_button = wx.Button(self.main_page, wx.ID_ADD, "")
        self.button_5 = wx.Button(self.main_page, wx.ID_EXIT, "")
        self.connect_button = wx.Button(self.main_page, -1, "Connect SI-Reader")
        self.run_runner_combo = wx.ComboBox(self.main_page, -1, choices=[], style=wx.CB_DROPDOWN)
        self.runner_number = wx.StaticText(self.main_page, -1, "101A")
        self.runner_name = wx.StaticText(self.main_page, -1, "Gaudenz Steinlin")
        self.runner_team = wx.StaticText(self.main_page, -1, u"UBOL 3 \"saugrün\"")
        self.runner_sicard = wx.StaticText(self.main_page, -1, "654324")
        self.course = wx.TextCtrl(self.main_page, -1, "LDN1", style=wx.TE_PROCESS_ENTER)
        self.run_validation = wx.StaticText(self.main_page, -1, "OK")
        self.team_validation = wx.StaticText(self.main_page, -1, "not yet finished")
        self.run_score = wx.StaticText(self.main_page, -1, "1:05:23")
        self.team_score = wx.StaticText(self.main_page, -1, "Runs: 21, Time: 9:04:32")
        self.override = wx.RadioBox(self.main_page, -1, "Override Validation", choices=["no override", "OK", "not completed", "missing controls", "did not finish", "did not start"], majorDimension=6, style=wx.RA_SPECIFY_ROWS)
        self.readout_time = wx.StaticText(self.main_page, -1, "2008-05-04 12:00:54")
        self.complete = wx.CheckBox(self.main_page, -1, "Run complete")
        self.run_id = wx.StaticText(self.main_page, -1, "1234")
        self.punches_grid = wx.grid.Grid(self.main_page, -1, size=(1, 1))
        self.progress_bar = wx.Gauge(self.readout_page, -1, 10)
        self.progress_text = wx.StaticText(self.readout_page, -1, "Reading Card data...")
        self.runner_number_readout = wx.StaticText(self.readout_page, -1, "101A")
        self.runner_name_readout = wx.StaticText(self.readout_page, -1, "Gaudenz Steinlin")
        self.runner_team_readout = wx.StaticText(self.readout_page, -1, u"UBOL 3 \"saugrün\"")
        self.runner_sicard_readout = wx.StaticText(self.readout_page, -1, "654324")
        self.run_validation_readout = wx.StaticText(self.readout_page, -1, "OK")
        self.team_validation_readout = wx.StaticText(self.readout_page, -1, "not yet finished")
        self.run_score_readout = wx.StaticText(self.readout_page, -1, "1:05:23")
        self.team_score_readout = wx.StaticText(self.readout_page, -1, "Runs: 21, Time: 9:04:32")
        self.label_8 = wx.StaticText(self.readout_page, -1, "Course code:")
        self.course_readout = wx.StaticText(self.readout_page, -1, "LEN5")
        self.run_id_readout = wx.StaticText(self.readout_page, -1, "1234")
        self.grid_readout = wx.grid.Grid(self.readout_page, -1, size=(1, 1))
        self.team_page = TeamPanel(TeamEditor(conf.store, conf.event), self.notebook, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.SetTeam, self.team_combo)
        self.Bind(wx.EVT_BUTTON, self.Commit, self.button_2)
        self.Bind(wx.EVT_COMBOBOX, self.SetRunner, self.runner_combo)
        self.Bind(wx.EVT_BUTTON, self.Rollback, self.button_4)
        self.Bind(wx.EVT_COMBOBOX, self.SetRun, self.run_combo)
        self.Bind(wx.EVT_BUTTON, self.AddRun, self.add_button)
        self.Bind(wx.EVT_BUTTON, self.Quit, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.ConnectReader, self.connect_button)
        self.Bind(wx.EVT_COMBOBOX, self.SetRunRunner, self.run_runner_combo)
        self.Bind(wx.EVT_TEXT, self.SetCourse, self.course)
        self.Bind(wx.EVT_RADIOBOX, self.SetOverride, self.override)
        self.Bind(wx.EVT_CHECKBOX, self.SetComplete, self.complete)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGE, self.ChangePunch, self.punches_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_HIDDEN, self.ExitPunch, self.punches_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_SHOWN, self.EditPunch, self.punches_grid)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.PageChange, self.notebook)
        # end wxGlade

        self.run_selector = run_selector
        self.run_editor = run_editor
        self.run_selector.add_observer(self)
        self.run_editor.add_observer(self)

        # set some controls        
        self.UpdateCombo(self.run_runner_combo, self.run_editor.get_runnerlist())
        self.progress_bar.SetRange(self.run_editor.max_progress)
        
        self.update(self.run_selector, None)
        self.update(self.run_editor, 'run')
        self.update(self.run_editor, 'reader')
        self._punch_changed = False

        # Add timer to periodically poll the si reader
        self.Bind(wx.EVT_TIMER, self.OnTimer)
        self._timer = wx.Timer(self)
        self._timer.Start(milliseconds=500, oneShot=False)
        self.Bind(wx.EVT_CLOSE, self.OnWindowClose)
        
    def __set_properties(self):
        # begin wxGlade: RunEditorFrame.__set_properties
        self.SetTitle("Run Editor")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("sicard.xpm", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((885, 836))
        self.statusbar.SetStatusWidths([-1, 250])
        # statusbar fields
        statusbar_fields = ["Waiting for SI-Card...", "/dev/ttyUSB0 (at 38400 baud)"]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.team_combo.SetMinSize((300, 34))
        self.runner_combo.SetMinSize((300, 34))
        self.run_combo.SetMinSize((300, 34))
        self.run_runner_combo.SetMinSize((250, 27))
        self.runner_number.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_name.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_team.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_sicard.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_validation.SetForegroundColour(wx.Colour(0, 255, 0))
        self.run_validation.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.team_validation.SetForegroundColour(wx.Colour(255, 0, 0))
        self.team_validation.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_score.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.team_score.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.override.SetSelection(0)
        self.complete.SetValue(1)
        self.run_id.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.punches_grid.CreateGrid(0, 7)
        self.punches_grid.SetRowLabelSize(30)
        self.punches_grid.EnableDragColSize(0)
        self.punches_grid.EnableDragRowSize(0)
        self.punches_grid.EnableDragGridSize(0)
        self.punches_grid.SetColLabelValue(0, "Nr.")
        self.punches_grid.SetColLabelValue(1, "Control")
        self.punches_grid.SetColLabelValue(2, "SI")
        self.punches_grid.SetColLabelValue(3, "Card Punchtime")
        self.punches_grid.SetColLabelValue(4, "Manual Punchtime")
        self.punches_grid.SetColLabelValue(5, "Ignore")
        self.punches_grid.SetColLabelValue(6, "")
        self.runner_number_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_name_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_team_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_sicard_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_validation_readout.SetForegroundColour(wx.Colour(0, 255, 0))
        self.run_validation_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.team_validation_readout.SetForegroundColour(wx.Colour(255, 0, 0))
        self.team_validation_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_score_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.team_score_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.course_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_id_readout.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.grid_readout.CreateGrid(0, 5)
        self.grid_readout.SetRowLabelSize(30)
        self.grid_readout.SetColLabelSize(30)
        self.grid_readout.EnableEditing(0)
        self.grid_readout.EnableDragColSize(0)
        self.grid_readout.EnableDragRowSize(0)
        self.grid_readout.EnableDragGridSize(0)
        self.grid_readout.SetColLabelValue(0, "Nr.")
        self.grid_readout.SetColLabelValue(1, "Control")
        self.grid_readout.SetColLabelValue(2, "SI")
        self.grid_readout.SetColLabelValue(3, "Punchtime")
        self.grid_readout.SetColLabelValue(4, "")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: RunEditorFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.StaticBoxSizer(self.sizer_14_staticbox, wx.VERTICAL)
        sizer_18 = wx.GridSizer(2, 2, 0, 0)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_17 = wx.StaticBoxSizer(self.sizer_17_staticbox, wx.VERTICAL)
        sizer_11 = wx.StaticBoxSizer(self.sizer_11_staticbox, wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.StaticBoxSizer(self.sizer_16_staticbox, wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(3, 3, 0, 0)
        label_1 = wx.StaticText(self.main_page, -1, "Team:")
        grid_sizer_1.Add(label_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_1.Add(self.team_combo, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        grid_sizer_1.Add(self.button_2, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 2)
        label_18 = wx.StaticText(self.main_page, -1, "Runner:")
        grid_sizer_1.Add(label_18, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        grid_sizer_1.Add(self.runner_combo, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        grid_sizer_1.Add(self.button_4, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 2)
        label_19 = wx.StaticText(self.main_page, -1, "Run:")
        grid_sizer_1.Add(label_19, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        grid_sizer_1.Add(self.run_combo, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        grid_sizer_1.Add(self.add_button, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_7.Add(grid_sizer_1, 0, wx.EXPAND, 0)
        sizer_13.Add(sizer_7, 0, wx.ALL|wx.EXPAND, 5)
        sizer_13.Add((10, 0), 1, wx.ADJUST_MINSIZE, 0)
        sizer_19.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_19.Add(self.button_5, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 2)
        sizer_19.Add(self.connect_button, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_13.Add(sizer_19, 0, wx.EXPAND, 0)
        sizer_5.Add(sizer_13, 0, 0, 0)
        label_2 = wx.StaticText(self.main_page, -1, "Change Runner:")
        sizer_8.Add(label_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add(self.run_runner_combo, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add((20, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_20_copy = wx.StaticText(self.main_page, -1, "Number:")
        sizer_8.Add(label_20_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add(self.runner_number, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add((20, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_20 = wx.StaticText(self.main_page, -1, "Runner:")
        sizer_8.Add(label_20, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add(self.runner_name, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add((20, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_22 = wx.StaticText(self.main_page, -1, "Team:")
        sizer_8.Add(label_22, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add(self.runner_team, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add((20, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_24 = wx.StaticText(self.main_page, -1, "SI-Card:")
        sizer_8.Add(label_24, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_8.Add(self.runner_sicard, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_9.Add(sizer_8, 0, wx.ALL|wx.EXPAND, 5)
        label_3 = wx.StaticText(self.main_page, -1, "Course Code:")
        sizer_4.Add(label_3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        sizer_4.Add(self.course, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 2)
        sizer_4.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_4 = wx.StaticText(self.main_page, -1, "Run Validation:")
        sizer_4.Add(label_4, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_4.Add(self.run_validation, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_4.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_6 = wx.StaticText(self.main_page, -1, "Team Validation:")
        sizer_4.Add(label_6, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_4.Add(self.team_validation, 0, wx.ALL, 2)
        sizer_4.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_6_copy = wx.StaticText(self.main_page, -1, "Score:")
        sizer_4.Add(label_6_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_4.Add(self.run_score, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_4.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_6_copy_copy_copy_copy = wx.StaticText(self.main_page, -1, "Team Score:")
        sizer_4.Add(label_6_copy_copy_copy_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_4.Add(self.team_score, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_10.Add(self.override, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_10.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_26 = wx.StaticText(self.main_page, -1, "Card readout time:")
        sizer_10.Add(label_26, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_10.Add(self.readout_time, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_10.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        sizer_10.Add(self.complete, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_10.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_24_copy_copy_copy = wx.StaticText(self.main_page, -1, "Run ID:")
        sizer_10.Add(label_24_copy_copy_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_10.Add(self.run_id, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_2.Add(sizer_10, 0, wx.EXPAND, 0)
        sizer_9.Add(sizer_2, 1, wx.ALL|wx.EXPAND, 5)
        sizer_5.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_16.Add(self.punches_grid, 1, wx.ALL|wx.EXPAND, 5)
        sizer_5.Add(sizer_16, 1, wx.ALL|wx.EXPAND, 5)
        self.main_page.SetSizer(sizer_5)
        sizer_3.Add(self.progress_bar, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 5)
        sizer_3.Add(self.progress_text, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
        label_20_copy_copy = wx.StaticText(self.readout_page, -1, "Number:")
        sizer_11.Add(label_20_copy_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_11.Add(self.runner_number_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_11.Add((20, 10), 0, wx.ADJUST_MINSIZE, 0)
        label_20_copy_1 = wx.StaticText(self.readout_page, -1, "Runner:")
        sizer_11.Add(label_20_copy_1, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_11.Add(self.runner_name_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_11.Add((20, 10), 0, wx.ADJUST_MINSIZE, 0)
        label_22_copy = wx.StaticText(self.readout_page, -1, "Team:")
        sizer_11.Add(label_22_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_11.Add(self.runner_team_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_11.Add((20, 10), 0, wx.ADJUST_MINSIZE, 0)
        label_24_copy = wx.StaticText(self.readout_page, -1, "SI-Card:")
        sizer_11.Add(label_24_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_11.Add(self.runner_sicard_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_15.Add(sizer_11, 1, wx.ALL|wx.EXPAND, 5)
        label_4_copy = wx.StaticText(self.readout_page, -1, "Run Validation:")
        sizer_17.Add(label_4_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_17.Add(self.run_validation_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_17.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_6_copy_1 = wx.StaticText(self.readout_page, -1, "Team Validation:")
        sizer_17.Add(label_6_copy_1, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_17.Add(self.team_validation_readout, 0, wx.ALL, 2)
        sizer_17.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_6_copy_copy = wx.StaticText(self.readout_page, -1, "Score:")
        sizer_17.Add(label_6_copy_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_17.Add(self.run_score_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_17.Add((10, 10), 1, wx.ADJUST_MINSIZE, 0)
        label_6_copy_copy_copy = wx.StaticText(self.readout_page, -1, "Team Score:")
        sizer_17.Add(label_6_copy_copy_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_17.Add(self.team_score_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_15.Add(sizer_17, 1, wx.ALL|wx.EXPAND, 5)
        sizer_12.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_18.Add(self.label_8, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        label_24_copy_copy = wx.StaticText(self.readout_page, -1, "Run ID:")
        sizer_18.Add(label_24_copy_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_18.Add(self.course_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_18.Add(self.run_id_readout, 0, wx.ALL|wx.ADJUST_MINSIZE, 2)
        sizer_14.Add(sizer_18, 0, wx.EXPAND, 0)
        sizer_14.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(self.grid_readout, 1, wx.EXPAND, 0)
        sizer_12.Add(sizer_14, 1, wx.ALL|wx.EXPAND, 5)
        sizer_3.Add(sizer_12, 1, wx.EXPAND, 0)
        self.readout_page.SetSizer(sizer_3)
        self.notebook.AddPage(self.main_page, "Edit Run")
        self.notebook.AddPage(self.readout_page, "Read SI-Card")
        self.notebook.AddPage(self.team_page, "Team Overview")
        sizer_1.Add(self.notebook, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((885, 836))
        # end wxGlade

    def OnWindowClose(self, event):
        self._timer.Stop()
        del self._timer
        self.Destroy()
        
    def OnTimer(self, event):
        try:
            self.run_editor.poll_reader()
        except Exception, msg:
            self.ErrorDialog(str(msg), 'Error reading SI-Card!')
        
    @staticmethod
    def UpdateCombo(combo, choice_list):
        sel = combo.GetSelection()
        combo.Clear()
        for c in choice_list:
            combo.Append(c[1], c[0])
        combo.SetSelection(sel)

    def update(self, observable, event):

        try:
            busy = wx.BusyCursor()
        
            # Disable Event handling while updating
            self.SetEvtHandlerEnabled(False)
        
            if type(observable) == RunSelector:

                self.UpdateCombo(self.team_combo,   observable.get_teams())
                self.UpdateCombo(self.runner_combo, observable.get_runners())
                self.UpdateCombo(self.run_combo,    observable.get_runs())
            
            elif type(observable) == RunEditor and event == 'run':
                self.UpdateRun()
                if self.notebook.GetSelection() == 1:
                    if (self.run_editor.has_runner == False
                        or self.run_editor.has_course == False):
                        # stop reader
                        self.run_editor.stop_reader()
                        # change to edit run page
                        self.notebook.SetSelection(0)
                    
            elif type(observable) == RunEditor and event == 'reader':
                self.statusbar.SetStatusText(observable.status, 0)
                self.statusbar.SetStatusText(observable.port, 1)
                wx.Yield()
            elif type(observable) == RunEditor and event == 'progress':
                p = observable.progress
                self.progress_bar.SetValue(p[0])
                self.progress_text.SetLabel(p[1])
                wx.Yield()
            
        finally:
            # Enable Event handling after updating
            self.SetEvtHandlerEnabled(True)
            
            # delete the busy cursor even if an exception occurs
            del busy

    def UpdateRun(self):
        def SetValidationLabel(label, result):
            label.SetLabel(result)
            if result == 'OK':
                label.SetForegroundColour('Green')
            elif result == 'NA':
                label.SetForegroundColour('Gray')
            else:
                label.SetForegroundColour('Red')

        self.runner_number.SetLabel(self.run_editor.runner_number)
        self.runner_number_readout.SetLabel(self.run_editor.runner_number)
        self.runner_name.SetLabel(self.run_editor.runner_name)
        self.runner_name_readout.SetLabel(self.run_editor.runner_name)
        self.runner_team.SetLabel(self.run_editor.runner_team)
        self.runner_team_readout.SetLabel(self.run_editor.runner_team)
        self.runner_sicard.SetLabel(self.run_editor.runner_sicard)
        self.runner_sicard_readout.SetLabel(self.run_editor.runner_sicard)

        self.course.SetValue(self.run_editor.run_course)
        self.course_readout.SetLabel(self.run_editor.run_course)
        self.run_id.SetLabel(self.run_editor.run_id)
        self.run_id_readout.SetLabel(self.run_editor.run_id)
        SetValidationLabel(self.run_validation, self.run_editor.run_validation)
        SetValidationLabel(self.run_validation_readout,
                           self.run_editor.run_validation)
        SetValidationLabel(self.team_validation, self.run_editor.team_validation)
        SetValidationLabel(self.team_validation_readout,
                           self.run_editor.team_validation)
        self.run_score.SetLabel(self.run_editor.run_score)
        self.run_score_readout.SetLabel(self.run_editor.run_score)
        self.team_score.SetLabel(self.run_editor.team_score)
        self.team_score_readout.SetLabel(self.run_editor.team_score)

        self.override.SetSelection(self.run_editor.run_override)
        self.readout_time.SetLabel(self.run_editor.run_readout_time)
        self.complete.SetValue(self.run_editor.run_complete)

        punchlist = self.run_editor.punchlist
        grid_size = self.punches_grid.GetNumberRows()
        if len(punchlist) > grid_size:
            self.punches_grid.AppendRows(numRows = len(punchlist) - grid_size)
            self.grid_readout.AppendRows(numRows = len(punchlist) - grid_size)
        elif len(punchlist) < grid_size:
            self.punches_grid.DeleteRows(numRows = grid_size - len(punchlist))
            self.grid_readout.DeleteRows(numRows = grid_size - len(punchlist))
            
        for row, p in enumerate(punchlist):
            self.punches_grid.SetReadOnly(row,0)
            self.punches_grid.SetReadOnly(row,1)
            self.punches_grid.SetReadOnly(row,2)
            self.punches_grid.SetReadOnly(row,3)
            self.punches_grid.SetCellRenderer(row,3,
                                              wx.grid.GridCellDateTimeRenderer())
            self.punches_grid.SetCellRenderer(row,4,
                                              wx.grid.GridCellDateTimeRenderer())
            self.punches_grid.SetCellRenderer(row,5, wx.grid.GridCellBoolRenderer())
            self.punches_grid.SetCellEditor(row,5, wx.grid.GridCellBoolEditor())
            self.punches_grid.SetReadOnly(row,6)
            for col, v in enumerate(p):
                self.punches_grid.SetCellValue(row, col, v)
                if col in [0,1,2,3]:
                    self.grid_readout.SetCellValue(row, col, v)
                elif col == 6:
                    self.grid_readout.SetCellValue(row, 4, v)
                    
                if p[6] == 'missing':
                    self.punches_grid.SetCellTextColour(row,col,'Red')
                    self.grid_readout.SetCellTextColour(row,col,'Red')
                elif p[6] == 'additional' or p[6] == 'ignored':
                    self.punches_grid.SetCellTextColour(row,col,'Gray')
                    self.grid_readout.SetCellTextColour(row,col,'Gray')
                elif p[6] == 'ok':
                    self.punches_grid.SetCellTextColour(row,col,'Green')
                    self.grid_readout.SetCellTextColour(row,col,'Green')
                else:
                    self.punches_grid.SetCellTextColour(row,col,'Black')
                    self.grid_readout.SetCellTextColour(row,col,'Black')

                if p[6] == 'missing' and col == 5:
                    self.punches_grid.SetReadOnly(row,col)
                elif col == 5:
                    self.punches_grid.SetReadOnly(row,col, False)

        self.punches_grid.AutoSize()
        self.grid_readout.AutoSize()
        self.main_page.Layout()
        self.readout_page.Layout()
        
    @staticmethod
    def GetComboData(combo):
        return combo.GetClientData(combo.GetSelection())
    
    def SetTeam(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.run_selector.set_team(self.GetComboData(self.team_combo))

    def SetRunner(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.run_selector.set_runner(self.GetComboData(self.runner_combo))

    def SetRun(self, event): # wxGlade: RunEditorFrame.<event_handler>
        if self.AskApply() != wx.ID_CANCEL:
            self.run_editor.load(self.GetComboData(self.run_combo))

    def SetRunRunner(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.run_editor.set_runner(self.GetComboData(self.run_runner_combo))

    def SetCourse(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.run_editor.set_course(self.course.GetValue().upper().strip())

    def SetOverride(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.run_editor.set_override(self.override.GetSelection())

    def SetComplete(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.run_editor.set_complete(self.complete.GetValue())

    def Commit(self, event): # wxGlade: RunEditorFrame.<event_handler>
        try:
            self.run_editor.commit()
        except Exception, msg:
            self.run_editor.rollback()
            self.ErrorDialog(str(msg), 'Error saving changes')

    def AddRun(self, event): # wxGlade: RunEditorFrame.<event_handler>
        if self.AskApply() != wx.ID_CANCEL:
            self.run_editor.new()

    def ErrorDialog(self, msg, title):
        dlg =  wx.MessageDialog(self, msg, title,
                                wx.OK | wx.ICON_ERROR)
        dlg.ShowModal()
        dlg.Destroy()

    def EditPunch(self, event): # wxGlade: RunEditorFrame.<event_handler>

        def FindLastPunchtime(punch):
            if punch == 0:
                return ''

            last_manual = self.punches_grid.GetCellValue(punch-1, 4)
            last_card = self.punches_grid.GetCellValue(punch-1, 3)

            if last_manual != '':
                return last_manual
            elif last_card != '':
                return last_card
            else:
                return FindLastPunchtime(punch-1)
            
        punch = event.GetRow()
        col = event.GetCol()

        # Set default value if no value is set
        if col == 4 and self.punches_grid.GetCellValue(punch, 4) == '':
            if self.punches_grid.GetCellValue(punch, 6) == 'missing':
                punchtime = self.run_editor.parse_time(FindLastPunchtime(punch))
                if punchtime is not None:
                    # Add 1 second for new punch
                    punchtime += timedelta(seconds=1)
                else:
                    punchtime = str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                wx.CallAfter(self.punches_grid.SetCellValue, punch, col, str(punchtime))
                self._punch_changed = True
            elif col == 4:
                self.punches_grid.SetCellValue(punch, col,
                                               self.punches_grid.GetCellValue(punch, 3))
                self._punch_changed = True

    def ExitPunch(self, event): # wxGlade: RunEditorFrame.<event_handler>
        if self._punch_changed:
            self._punch_changed = False
            self.ChangePunch(event)

    def ChangePunch(self, event): # wxGlade: RunEditorFrame.<event_handler>
        punch = event.GetRow()
        col = event.GetCol()

        if col == 4:
            try:
                self.run_editor.set_punchtime(punch,
                                              self.punches_grid.GetCellValue(punch, col).strip())
            except ValueError, msg:
                self.ErrorDialog(str(msg), 'invalid time format')
                event.Veto()
                return 
        elif col == 5:
            self.run_editor.set_ignore(punch,
                                       self.punches_grid.GetCellValue(punch, col))

    def Rollback(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.run_editor.rollback()

    def ConnectReader(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.run_editor.connect_reader()

    def AskApply(self):
        if self.run_editor.changed:
            dlg = wx.MessageDialog(self, 'You have made changes to this run. Do you want to apply these changes now? If you answser "No" the changes will be lost!',
                                   'unapplied changes',
                                   style = wx.YES_NO|wx.CANCEL|wx.ICON_QUESTION)
            answer = dlg.ShowModal()
            dlg.Destroy()
            if answer == wx.ID_YES:
                self.run_editor.commit()
            elif answer == wx.ID_NO:
                self.run_editor.rollback()
            return answer

    def Quit(self, event): # wxGlade: RunEditorFrame.<event_handler>
        if self.AskApply() != wx.ID_CANCEL:
            self.Close(True)

    def PageChange(self, event): # wxGlade: RunEditorFrame.<event_handler>
        if self.AskApply() == wx.ID_CANCEL:
            event.Veto()
            return
        if event.GetSelection() == 1:
            self.run_editor.start_reader()
        else:
            self.run_editor.stop_reader()

        event.Skip()

# end of class RunEditorFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(redirect = False)
    wx.InitAllImageHandlers()
    main_frame = RunEditorFrame(RunSelector(conf.store),
                                RunEditor(conf.store, conf.event),
                                None, -1, "")
    app.SetTopWindow(main_frame)
    main_frame.Show()
    app.MainLoop()
