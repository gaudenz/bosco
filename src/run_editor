#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun May 17 23:10:24 2009

import sys

import wx
import wx.grid
from wx.lib.scrolledpanel import ScrolledPanel

from datetime import timedelta, datetime

import conf
from editor import RunFinder, RunEditor, TeamEditor, RunEditorException

# begin wxGlade: extracode
# end wxGlade


class RunEditorFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: RunEditorFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        
        # Menu Bar
        self.main_frame_menubar = wx.MenuBar()
        self.file = wx.Menu()
        self.quit = wx.MenuItem(self.file, wx.NewId(), "&Quit\tCtrl-q", "", wx.ITEM_NORMAL)
        self.file.AppendItem(self.quit)
        self.main_frame_menubar.Append(self.file, "&File")
        self.settings = wx.Menu()
        self.connect_reader = wx.MenuItem(self.settings, wx.NewId(), "&Connect SI-Reader", "", wx.ITEM_NORMAL)
        self.settings.AppendItem(self.connect_reader)
        self.main_frame_menubar.Append(self.settings, "&Settings")
        self.SetMenuBar(self.main_frame_menubar)
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(2, 0)
        self.edit_run_page = EditRunPanel(self.notebook_1, -1)
        self.readout_run_page = ReadoutRunPanel(self.notebook_1, -1)
        self.team_page = TeamPanel(self.notebook_1, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.Quit, self.quit)
        self.Bind(wx.EVT_MENU, self.ConnectReader, self.connect_reader)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.PageChange, self.notebook_1)
        # end wxGlade
        
        # Setting editor and selector, it would be cleaner to do this via a custom constructor, 
        # but wxglade doesn't allow this.
        self.editor = RunEditor(conf.store, conf.event)
        self.editor.add_observer(self)
        self.update(self.editor, 'reader')

        # Add timer to periodically poll the si reader
        self.Bind(wx.EVT_TIMER, self.OnTimer)
        self._timer = wx.Timer(self)
        self._timer.Start(milliseconds=500, oneShot=False)
        self.Bind(wx.EVT_CLOSE, self.OnWindowClose)
        
    def __set_properties(self):
        # begin wxGlade: RunEditorFrame.__set_properties
        self.SetTitle("Run Editor")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("sicard.xpm", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((885, 836))
        self.statusbar.SetStatusWidths([-1, 250])
        # statusbar fields
        statusbar_fields = ["Waiting for SI-Card...", "/dev/ttyUSB0 (at 38400 baud)"]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: RunEditorFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        self.notebook_1.AddPage(self.edit_run_page, "Edit Run")
        self.notebook_1.AddPage(self.readout_run_page, "Read SI-Card")
        self.notebook_1.AddPage(self.team_page, "Team Overview")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((885, 836))
        # end wxGlade

    def OnWindowClose(self, event):
        self._timer.Stop()
        del self._timer
        self.Destroy()
        
    def OnTimer(self, event):
        try:
            self.editor.poll_reader()
        except Exception, msg:
            self.ErrorDialog(str(msg), 'Error reading SI-Card!')
        
    def update(self, observable, event):
        
        if type(observable) == RunEditor and event == 'reader':
            self.statusbar.SetStatusText(observable.status, 0)
            self.statusbar.SetStatusText(observable.port, 1)
            wx.Yield()

    def PageChange(self, event): # wxGlade: RunEditorFrame.<event_handler>
        if self.edit_run_page.AskApply() == wx.ID_CANCEL:
            event.Veto()
            return
        if event.GetSelection() == 1:
            self.edit_run_page.editor.start_reader()
        else:
            self.edit_run_page.editor.stop_reader()

        event.Skip()

    def Quit(self, event): # wxGlade: RunEditorFrame.<event_handler>
        if self.edit_run_page.AskApply() != wx.ID_CANCEL:
            self.Close(True)

    def ConnectReader(self, event): # wxGlade: RunEditorFrame.<event_handler>
        self.editor.connect_reader()

# end of class RunEditorFrame

class RunSearchWidget(wx.SearchCtrl):

    def __init__(self, *args, **kwargs):
        super(RunSearchWidget, self).__init__(*args, **kwargs)
        self._finder = None
        self.Disable()

        self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.SetSearchTerm, self)
        self.Bind(wx.EVT_TEXT, self.SetSearchTerm, self)

    def SetFinder(self, finder):
        self._finder = finder
        if finder is not None:

            # construct the search domain menu
            self._menu = wx.Menu()
            self._search_domains = self._finder.get_search_domains()
            for m in self._search_domains:
                item = self._menu.AppendRadioItem(-1, m[1])
                self.Bind(wx.EVT_MENU, self.SetSearchDomain, item)
                # set search domain to runner
                if m[0] == 'runner':
                    item.Toggle()
            self.SetMenu(self._menu)
            self.Enable()
        else:
            self.Disable()

    def SetSearchDomain(self, event):
         for i,item in enumerate(self.GetMenu().GetMenuItems()):
            if item.IsChecked():
                self._finder.set_search_domain(self._search_domains[i][0])
                self.SetDescriptiveText("Search in %s" % self._search_domains[i][1])

    def SetSearchTerm(self, event):
        self._finder.set_search_term(self.GetValue())

class EditingPanel(ScrolledPanel):
    def __init__(self, *args, **kwds):
        ScrolledPanel.__init__(self, *args, **kwds)
        self.SetupScrolling()

    @staticmethod    
    def SetValidationLabel(label, result):
        label.SetLabel(result)
        if result == 'OK':
            label.SetForegroundColour('Green')
        elif result == 'NA':
            label.SetForegroundColour('Gray')
        else:
            label.SetForegroundColour('Red')
       
class TeamPanel(EditingPanel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: TeamPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        EditingPanel.__init__(self, *args, **kwds)
        self.label_11 = wx.StaticText(self, -1, "Select Team:")
        self.team_combo = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN)
        self.validation = wx.StaticText(self, -1, "not yet finished")
        self.label_9 = wx.StaticText(self, -1, "Team Score:")
        self.score = wx.StaticText(self, -1, "Runs: 41, Time:23:34:76")
        self.run_grid = wx.grid.Grid(self, -1, size=(1, 1))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.ChangeTeam, self.team_combo)
        # end wxGlade
        
        self.editor = TeamEditor(conf.store, conf.event)
        self.editor.add_observer(self)
        
        # set teamlist into selector
        for t in self.editor.get_teamlist():
            self.team_combo.Append(t[1], t[0])

        self.update(self.editor, None)

    def __set_properties(self):
        # begin wxGlade: TeamPanel.__set_properties
        self.team_combo.SetMinSize((300, 27))
        self.validation.SetForegroundColour(wx.Colour(255, 0, 0))
        self.validation.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.score.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_grid.CreateGrid(0, 8)
        self.run_grid.EnableEditing(0)
        self.run_grid.EnableDragColSize(0)
        self.run_grid.EnableDragRowSize(0)
        self.run_grid.EnableDragGridSize(0)
        self.run_grid.SetColLabelValue(0, "Run ID")
        self.run_grid.SetColLabelValue(1, "Course")
        self.run_grid.SetColLabelValue(2, "Runner")
        self.run_grid.SetColLabelValue(3, "SI-Card")
        self.run_grid.SetColLabelValue(4, "Start")
        self.run_grid.SetColLabelValue(5, "Finish")
        self.run_grid.SetColLabelValue(6, "Validation")
        self.run_grid.SetColLabelValue(7, "Score")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TeamPanel.__do_layout
        sizer_20 = wx.BoxSizer(wx.VERTICAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22.Add(self.label_11, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_22.Add(self.team_combo, 0, wx.ALL, 5)
        sizer_20.Add(sizer_22, 0, wx.EXPAND, 0)
        label_6_copy_2 = wx.StaticText(self, -1, "Team Validation:")
        sizer_21.Add(label_6_copy_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_21.Add(self.validation, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_21.Add(self.label_9, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_21.Add(self.score, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_20.Add(sizer_21, 0, wx.EXPAND, 0)
        sizer_20.Add(self.run_grid, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_20)
        sizer_20.Fit(self)
        # end wxGlade

    def update(self, observable, event):
        busy = wx.BusyCursor()

        try:
            self.SetValidationLabel(self.validation, self.editor.validation)
                            
            self.score.SetLabel(self.editor.score)

            runs = self.editor.runs
            grid_size = self.run_grid.GetNumberRows()
            if len(runs) > grid_size:
                self.run_grid.AppendRows(numRows = len(runs) - grid_size)
            elif len(runs) < grid_size:
                self.run_grid.DeleteRows(numRows = grid_size - len(runs))
            
            for row, r in enumerate(runs):
                for col, v in enumerate(r):
                    self.run_grid.SetCellValue(row, col, v)
                
            self.run_grid.AutoSize()
            self.Layout()
        finally:
            del busy

    def ChangeTeam(self, event): # wxGlade: TeamPanel.<event_handler>
        team = self.team_combo.GetClientData(self.team_combo.GetSelection())
        self.editor.load(team)
        

# end of class TeamPanel

class RunPanel(EditingPanel):
    def __init__(self, *args, **kwds):
        EditingPanel.__init__(self, *args, **kwds)
        
        self.editor = RunEditor(conf.store, conf.event)
        self.editor.add_observer(self)

    def UpdateRun(self):
        self.runner_sicard.SetLabel(self.editor.runner_sicard)

        self.run_id.SetLabel(self.editor.run_id)
        self.SetValidationLabel(self.run_validation, self.editor.run_validation)
        self.SetValidationLabel(self.team_validation, self.editor.team_validation)
        self.run_score.SetLabel(self.editor.run_score)
        self.team_score.SetLabel(self.editor.team_score)

        self.clear_time.SetLabel(self.editor.run_clear_time)
        self.check_time.SetLabel(self.editor.run_check_time)

        punchlist = self.editor.punchlist
        grid_size = self.punches_grid.GetNumberRows()
        if len(punchlist) > grid_size:
            self.punches_grid.AppendRows(numRows = len(punchlist) - grid_size)
        elif len(punchlist) < grid_size:
            self.punches_grid.DeleteRows(numRows = grid_size - len(punchlist))
            
        for row, p in enumerate(punchlist):
            self.punches_grid.SetReadOnly(row,0)
            self.punches_grid.SetReadOnly(row,1)
            self.punches_grid.SetReadOnly(row,2)
            self.punches_grid.SetReadOnly(row,3)
            self.punches_grid.SetCellRenderer(row,3,
                                              wx.grid.GridCellDateTimeRenderer())
            self.punches_grid.SetCellRenderer(row,4,
                                              wx.grid.GridCellDateTimeRenderer())
            self.punches_grid.SetCellRenderer(row,5, wx.grid.GridCellBoolRenderer())
            self.punches_grid.SetCellEditor(row,5, wx.grid.GridCellBoolEditor())
            self.punches_grid.SetReadOnly(row,6)
            for col, v in enumerate(p):
                self.punches_grid.SetCellValue(row, col, v)
                    
                if p[6] == 'missing':
                    self.punches_grid.SetCellTextColour(row,col,'Red')
                elif p[6] == 'additional' or p[6] == 'ignored':
                    self.punches_grid.SetCellTextColour(row,col,'Gray')
                elif p[6] == 'ok':
                    self.punches_grid.SetCellTextColour(row,col,'Green')
                else:
                    self.punches_grid.SetCellTextColour(row,col,'Black')

                if p[6] == 'missing' and col == 5:
                    self.punches_grid.SetReadOnly(row,col)
                elif col == 5:
                    self.punches_grid.SetReadOnly(row,col, False)

        self.punches_grid.AutoSize()
        self.Layout()
        
class EditRunPanel(RunPanel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: EditRunPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        RunPanel.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.sizer_8_staticbox = wx.StaticBox(self.window_1_pane_2, -1, "Runner")
        self.sizer_2_copy_staticbox = wx.StaticBox(self.window_1_pane_2, -1, "Run")
        self.sizer_25_staticbox = wx.StaticBox(self.window_1_pane_2, -1, "Validation and Scoreing")
        self.sizer_26_staticbox = wx.StaticBox(self.window_1_pane_2, -1, "SI-Card Times")
        self.sizer_16_staticbox = wx.StaticBox(self.window_1_pane_2, -1, "Punches")
        self.sizer_30_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "Select Run")
        self.searchbox = RunSearchWidget(self.window_1_pane_1, -1)
        self.searchresults = wx.ListCtrl(self.window_1_pane_1, -1, style=wx.LC_REPORT|wx.LC_SINGLE_SEL|wx.SUNKEN_BORDER)
        self.button_2 = wx.Button(self.window_1_pane_1, wx.ID_APPLY, "")
        self.button_4 = wx.Button(self.window_1_pane_1, wx.ID_REVERT_TO_SAVED, "")
        self.add_button = wx.Button(self.window_1_pane_1, wx.ID_ADD, "")
        self.run_runner_combo = wx.ComboBox(self.window_1_pane_2, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        self.runner_number = wx.TextCtrl(self.window_1_pane_2, -1, "101A")
        self.runner_given_name = wx.TextCtrl(self.window_1_pane_2, -1, "Gaudenz")
        self.runner_surname = wx.TextCtrl(self.window_1_pane_2, -1, "Steinlin")
        self.label_4 = wx.StaticText(self.window_1_pane_2, -1, "Date of birth:")
        self.runner_dateofbirth = wx.TextCtrl(self.window_1_pane_2, -1, "1975-10-05")
        self.runner_team = wx.ComboBox(self.window_1_pane_2, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        self.run_id = wx.StaticText(self.window_1_pane_2, -1, "1234")
        self.course = wx.TextCtrl(self.window_1_pane_2, -1, "LDN1", style=wx.TE_PROCESS_ENTER)
        self.label_12 = wx.StaticText(self.window_1_pane_2, -1, "Manual start time:")
        self.manual_start_time = wx.TextCtrl(self.window_1_pane_2, -1, "")
        self.label_13 = wx.StaticText(self.window_1_pane_2, -1, "Manual finish time:")
        self.manual_finish_time = wx.TextCtrl(self.window_1_pane_2, -1, "")
        self.override = wx.RadioBox(self.window_1_pane_2, -1, "Override Validation", choices=["no override", "OK", "not completed", "missing controls", "did not finish", "did not start"], majorDimension=6, style=wx.RA_SPECIFY_ROWS)
        self.complete = wx.CheckBox(self.window_1_pane_2, -1, "Run complete")
        self.run_validation = wx.StaticText(self.window_1_pane_2, -1, "OK")
        self.team_validation = wx.StaticText(self.window_1_pane_2, -1, "not yet finished")
        self.run_score = wx.StaticText(self.window_1_pane_2, -1, "1:05:23")
        self.team_score = wx.StaticText(self.window_1_pane_2, -1, "Runs: 21, Time: 9:04:32")
        self.label_5 = wx.StaticText(self.window_1_pane_2, -1, "Clear time:")
        self.label_7 = wx.StaticText(self.window_1_pane_2, -1, "Check time:")
        self.label_7_copy = wx.StaticText(self.window_1_pane_2, -1, "Start time:")
        self.label_7_copy_1 = wx.StaticText(self.window_1_pane_2, -1, "Finish time:")
        self.runner_sicard = wx.StaticText(self.window_1_pane_2, -1, "7644523")
        self.readout_time = wx.StaticText(self.window_1_pane_2, -1, "2008-05-04 12:00:54")
        self.clear_time = wx.StaticText(self.window_1_pane_2, -1, "2008-05-04 11:02:54")
        self.check_time = wx.StaticText(self.window_1_pane_2, -1, "2008-05-04 11:03:01")
        self.card_start_time = wx.StaticText(self.window_1_pane_2, -1, "2008-05-04 11:05:29")
        self.card_finish_time = wx.StaticText(self.window_1_pane_2, -1, "2008-05-04 11:58:01")
        self.punches_grid = wx.grid.Grid(self.window_1_pane_2, -1, size=(1, 1))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.SetRun, self.searchresults)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.SetRun, self.searchresults)
        self.Bind(wx.EVT_BUTTON, self.Commit, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.Rollback, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.AddRun, self.add_button)
        self.Bind(wx.EVT_COMBOBOX, self.SetRunRunner, self.run_runner_combo)
        self.Bind(wx.EVT_TEXT, self.FieldChanged, self.runner_number)
        self.Bind(wx.EVT_TEXT, self.FieldChanged, self.runner_given_name)
        self.Bind(wx.EVT_TEXT, self.FieldChanged, self.runner_surname)
        self.Bind(wx.EVT_TEXT, self.FieldChanged, self.runner_dateofbirth)
        self.Bind(wx.EVT_COMBOBOX, self.SetRunnerTeam, self.runner_team)
        self.Bind(wx.EVT_TEXT, self.SetCourse, self.course)
        self.Bind(wx.EVT_TEXT, self.FieldChanged, self.manual_start_time)
        self.Bind(wx.EVT_TEXT, self.FieldChanged, self.manual_finish_time)
        self.Bind(wx.EVT_RADIOBOX, self.SetOverride, self.override)
        self.Bind(wx.EVT_CHECKBOX, self.SetComplete, self.complete)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGE, self.ChangePunch, self.punches_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_HIDDEN, self.ExitPunch, self.punches_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_SHOWN, self.EditPunch, self.punches_grid)
        # end wxGlade

        # set searchresult column headers
        self.searchresults.InsertColumn(0, "ID")
        self.searchresults.SetColumnWidth(0, 30)
        self.searchresults.InsertColumn(1, "Course")
        self.searchresults.SetColumnWidth(1, 60)
        self.searchresults.InsertColumn(2, "Readout time")
        self.searchresults.SetColumnWidth(2, 100)
        self.searchresults.InsertColumn(3, "Number")
        self.searchresults.SetColumnWidth(3, 60)
        self.searchresults.InsertColumn(4, "Runner")
        self.searchresults.SetColumnWidth(4, 220)
        self.searchresults.InsertColumn(5, "Team")
        self.searchresults.SetColumnWidth(5, 220)
        self.searchresults.InsertColumn(6, "Category")
        self.searchresults.SetColumnWidth(6, 60)

        self.manual_start_time.Bind(wx.EVT_KILL_FOCUS, self.SetManualStartTime)
        self.manual_finish_time.Bind(wx.EVT_KILL_FOCUS, self.SetManualFinishTime)
        self.runner_number.Bind(wx.EVT_KILL_FOCUS, self.SetRunnerNumber)
        self.runner_given_name.Bind(wx.EVT_KILL_FOCUS, self.SetRunnerGivenName)
        self.runner_surname.Bind(wx.EVT_KILL_FOCUS, self.SetRunnerSurname)
        self.runner_dateofbirth.Bind(wx.EVT_KILL_FOCUS, self.SetRunnerDateofbirth)

        # To avoid updates if the field is not changed and the focus just enters the
        # field and leaves it again without the user changeing any text, track if the field
        # was changed: self.ResetFieldChanged sets self.field_changed = False and self.FieldChanged
        # which is called on any EVT_TEXT event sets it to True. All the callbacks called on EVT_KILL_FOCUS
        # first check this self.field_changed.
        for field in (self.manual_start_time, self.manual_finish_time, self.runner_number,
                      self.runner_given_name, self.runner_surname, self.runner_dateofbirth):
            field.Bind(wx.EVT_SET_FOCUS, self.ResetFieldChanged)
        
        self.finder = RunFinder(conf.store)
        self.finder.add_observer(self)
        self.searchbox.SetFinder(self.finder)
        self.update(self.finder, None)
        self.update(self.editor, 'run')
        
        self.UpdateCombo(self.run_runner_combo, None, self.editor.get_runnerlist())
        self.UpdateCombo(self.runner_team, None, self.editor.get_teamlist())

    def __set_properties(self):
        # begin wxGlade: EditRunPanel.__set_properties
        self.run_runner_combo.SetMinSize((250, 27))
        self.runner_number.SetMinSize((250, 25))
        self.runner_given_name.SetMinSize((122, 25))
        self.runner_surname.SetMinSize((122, 25))
        self.runner_dateofbirth.SetMinSize((90, 25))
        self.runner_team.SetMinSize((250, 27))
        self.course.SetMinSize((150, 25))
        self.manual_start_time.SetMinSize((150, 25))
        self.manual_finish_time.SetMinSize((150, 25))
        self.override.SetSelection(0)
        self.complete.SetValue(1)
        self.run_validation.SetForegroundColour(wx.Colour(0, 255, 0))
        self.run_validation.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.team_validation.SetForegroundColour(wx.Colour(255, 0, 0))
        self.team_validation.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_score.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.team_score.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.punches_grid.CreateGrid(0, 7)
        self.punches_grid.SetRowLabelSize(30)
        self.punches_grid.EnableDragColSize(0)
        self.punches_grid.EnableDragRowSize(0)
        self.punches_grid.EnableDragGridSize(0)
        self.punches_grid.SetColLabelValue(0, "Nr.")
        self.punches_grid.SetColLabelValue(1, "Control")
        self.punches_grid.SetColLabelValue(2, "SI")
        self.punches_grid.SetColLabelValue(3, "Card Punchtime")
        self.punches_grid.SetColLabelValue(4, "Manual Punchtime")
        self.punches_grid.SetColLabelValue(5, "Ignore")
        self.punches_grid.SetColLabelValue(6, "")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: EditRunPanel.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.StaticBoxSizer(self.sizer_16_staticbox, wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.StaticBoxSizer(self.sizer_26_staticbox, wx.HORIZONTAL)
        sizer_23_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.StaticBoxSizer(self.sizer_25_staticbox, wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizer_6_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_2_copy = wx.StaticBoxSizer(self.sizer_2_copy_staticbox, wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.VERTICAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_30 = wx.StaticBoxSizer(self.sizer_30_staticbox, wx.VERTICAL)
        sizer_30.Add(self.searchbox, 0, wx.ALL|wx.EXPAND, 5)
        sizer_30.Add(self.searchresults, 1, wx.ALL|wx.EXPAND, 3)
        sizer_13.Add(sizer_30, 1, wx.EXPAND, 0)
        sizer_19.Add(self.button_2, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_19.Add(self.button_4, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_19.Add(self.add_button, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_13.Add(sizer_19, 0, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_13)
        label_2 = wx.StaticText(self.window_1_pane_2, -1, "Change Runner:")
        sizer_8.Add(label_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_8.Add(self.run_runner_combo, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_8.Add((20, 5), 0, 0, 0)
        label_20_copy = wx.StaticText(self.window_1_pane_2, -1, "Number:")
        sizer_8.Add(label_20_copy, 0, wx.ALL, 2)
        sizer_8.Add(self.runner_number, 0, wx.ALL, 2)
        sizer_8.Add((20, 10), 0, 0, 0)
        label_20 = wx.StaticText(self.window_1_pane_2, -1, "Runner:")
        sizer_8.Add(label_20, 0, wx.ALL, 2)
        sizer_28.Add(self.runner_given_name, 0, wx.ALL, 2)
        sizer_28.Add(self.runner_surname, 0, wx.ALL, 2)
        sizer_8.Add(sizer_28, 0, wx.EXPAND, 0)
        sizer_29.Add(self.label_4, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_29.Add(self.runner_dateofbirth, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_8.Add(sizer_29, 0, wx.EXPAND, 0)
        sizer_8.Add((20, 5), 0, 0, 0)
        label_22 = wx.StaticText(self.window_1_pane_2, -1, "Team:")
        sizer_8.Add(label_22, 0, wx.ALL, 2)
        sizer_8.Add(self.runner_team, 0, wx.ALL, 2)
        sizer_9.Add(sizer_8, 0, wx.ALL|wx.EXPAND, 5)
        label_24_copy_copy_copy_copy = wx.StaticText(self.window_1_pane_2, -1, "Run ID:")
        sizer_27.Add(label_24_copy_copy_copy_copy, 0, wx.ALL, 2)
        sizer_27.Add(self.run_id, 0, wx.ALL, 2)
        sizer_4.Add(sizer_27, 0, wx.EXPAND, 0)
        sizer_4.Add((10, 5), 0, 0, 0)
        label_3 = wx.StaticText(self.window_1_pane_2, -1, "Course Code:")
        sizer_4.Add(label_3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_4.Add(self.course, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_4.Add((10, 5), 0, 0, 0)
        sizer_4.Add(self.label_12, 0, 0, 0)
        sizer_4.Add(self.manual_start_time, 0, 0, 0)
        sizer_4.Add((10, 10), 0, 0, 0)
        sizer_4.Add(self.label_13, 0, 0, 0)
        sizer_4.Add(self.manual_finish_time, 0, 0, 0)
        sizer_2_copy.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_2_copy.Add((20, 20), 0, 0, 0)
        sizer_10.Add(self.override, 0, wx.ALL, 2)
        sizer_10.Add(self.complete, 0, wx.ALL, 2)
        sizer_2_copy.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_9.Add(sizer_2_copy, 0, wx.ALL|wx.EXPAND, 5)
        label_4_copy_1 = wx.StaticText(self.window_1_pane_2, -1, "Run Validation:")
        sizer_6_copy.Add(label_4_copy_1, 0, wx.ALL, 2)
        label_6_copy_3 = wx.StaticText(self.window_1_pane_2, -1, "Team Validation:")
        sizer_6_copy.Add(label_6_copy_3, 0, wx.ALL, 2)
        label_6_copy_copy_1 = wx.StaticText(self.window_1_pane_2, -1, "Score:")
        sizer_6_copy.Add(label_6_copy_copy_1, 0, wx.ALL, 2)
        label_6_copy_copy_copy_copy_copy = wx.StaticText(self.window_1_pane_2, -1, "Team Score:")
        sizer_6_copy.Add(label_6_copy_copy_copy_copy_copy, 0, wx.ALL, 2)
        sizer_25.Add(sizer_6_copy, 0, wx.EXPAND, 0)
        sizer_23.Add(self.run_validation, 0, wx.ALL, 2)
        sizer_23.Add(self.team_validation, 0, wx.ALL, 2)
        sizer_23.Add(self.run_score, 0, wx.ALL, 2)
        sizer_23.Add(self.team_score, 0, wx.ALL, 2)
        sizer_25.Add(sizer_23, 0, wx.EXPAND, 0)
        sizer_24.Add(sizer_25, 1, wx.ALL|wx.EXPAND, 5)
        label_24 = wx.StaticText(self.window_1_pane_2, -1, "SI-Card:")
        sizer_6.Add(label_24, 0, wx.ALL, 2)
        label_26 = wx.StaticText(self.window_1_pane_2, -1, "Readout time:")
        sizer_6.Add(label_26, 0, wx.ALL, 2)
        sizer_6.Add(self.label_5, 0, wx.ALL, 2)
        sizer_6.Add(self.label_7, 0, wx.ALL, 2)
        sizer_6.Add(self.label_7_copy, 0, wx.ALL, 2)
        sizer_6.Add(self.label_7_copy_1, 0, wx.ALL, 2)
        sizer_26.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_23_copy.Add(self.runner_sicard, 0, wx.ALL, 2)
        sizer_23_copy.Add(self.readout_time, 0, wx.ALL, 2)
        sizer_23_copy.Add(self.clear_time, 0, wx.ALL, 2)
        sizer_23_copy.Add(self.check_time, 0, wx.ALL, 2)
        sizer_23_copy.Add(self.card_start_time, 0, wx.ALL, 2)
        sizer_23_copy.Add(self.card_finish_time, 0, wx.ALL, 2)
        sizer_26.Add(sizer_23_copy, 0, wx.EXPAND, 0)
        sizer_24.Add(sizer_26, 1, wx.ALL|wx.EXPAND, 5)
        sizer_9.Add(sizer_24, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_16.Add(self.punches_grid, 1, wx.ALL|wx.EXPAND, 5)
        sizer_2.Add(sizer_16, 1, wx.ALL|wx.EXPAND, 5)
        self.window_1_pane_2.SetSizer(sizer_2)
        self.window_1.SplitHorizontally(self.window_1_pane_1, self.window_1_pane_2)
        sizer_5.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_5)
        sizer_5.Fit(self)
        # end wxGlade

    @staticmethod
    def GetComboData(combo):
        return combo.GetClientData(combo.GetSelection())

    def ResetFieldChanged(self, e):
        self.field_changed = False

    def FieldChanged(self, e): # wxGlade: EditRunPanel.<event_handler>
        self.field_changed = True

    def SetRunRunner(self, event): # wxGlade: EditRunPanel.<event_handler>
        self.editor.set_runner(self.GetComboData(self.run_runner_combo))

    def SetCourse(self, event): # wxGlade: EditRunPanel.<event_handler>
        self.editor.set_course(self.course.GetValue().upper().strip())

    def SetManualStartTime(self, event):
        if not self.field_changed:
            return
        
        try: 
            self.editor.set_manual_start_time(self.manual_start_time.GetValue().strip())
        except ValueError, msg:
            self.ErrorDialog(str(msg), 'invalid time format')
            self.manual_start_time.SetFocus()

    def SetManualFinishTime(self, event):
        if not self.field_changed:
            return
        
        try:
            self.editor.set_manual_finish_time(self.manual_finish_time.GetValue().strip())
        except ValueError, msg:
            self.ErrorDialog(str(msg), 'invalid time format')
            self.manual_finish_time.SetFocus()

    def SetRunnerNumber(self, event):
        if not self.field_changed:
            return
        
        try:
            self.editor.set_runner_number(self.runner_number.GetValue().strip())
        except RunEditorException, e:
            dlg = wx.MessageDialog(self, u'%s Only one runner may have this number. Do you want to assign the number to this runner?' % e.message,
                                   'duplicate number',
                                   style = wx.YES_NO|wx.ICON_QUESTION)
            answer = dlg.ShowModal()
            dlg.Destroy()
            if answer == wx.ID_YES:
                self.editor.set_runner_number(self.runner_number.GetValue().strip(), force = True)
            elif answer == wx.ID_NO:
                self.runner_number.SetFocus()
            
    
    def SetRunnerGivenName(self, event):
        if not self.field_changed:
            return
        
        self.editor.set_runner_given_name(self.runner_given_name.GetValue().strip())

    def SetRunnerSurname(self, event):
        if not self.field_changed:
            return
        
        self.editor.set_runner_surname(self.runner_surname.GetValue().strip())

    def SetRunnerDateofbirth(self, event):
        if not self.field_changed:
            return
        
        try:
            self.editor.set_runner_dateofbirth(self.runner_dateofbirth.GetValue().strip())
        except ValueError, msg:
            self.ErrorDialog(str(msg), 'invalid date format')
            self.runner_dateofbirth.SetFocus()
    
    def SetRunnerTeam(self, event): # wxGlade: EditRunPanel.<event_handler>
        self.editor.set_runner_team(self.GetComboData(self.runner_team))

    def SetOverride(self, event): # wxGlade: EditRunPanel.<event_handler>
        self.editor.set_override(self.override.GetSelection())

    def SetComplete(self, event): # wxGlade: EditRunPanel.<event_handler>
        self.editor.set_complete(self.complete.GetValue())

    def Commit(self, event): # wxGlade: EditRunPanel.<event_handler>
        try:
            self.editor.commit()
        except Exception, msg:
            self.editor.rollback()
            self.ErrorDialog(str(msg), 'Error saving changes')

    def AddRun(self, event): # wxGlade: EditRunPanel.<event_handler>
        if self.AskApply() != wx.ID_CANCEL:
            self.editor.new()

    def ErrorDialog(self, msg, title):
        dlg =  wx.MessageDialog(self, msg, title,
                                wx.OK | wx.ICON_ERROR)
        dlg.ShowModal()
        dlg.Destroy()

    def EditPunch(self, event): # wxGlade: EditRunPanel.<event_handler>

        def FindLastPunchtime(punch):
            if punch == 0:
                return ''

            last_manual = self.punches_grid.GetCellValue(punch-1, 4)
            last_card = self.punches_grid.GetCellValue(punch-1, 3)

            if last_manual != '':
                return last_manual
            elif last_card != '':
                return last_card
            else:
                return FindLastPunchtime(punch-1)
            
        punch = event.GetRow()
        col = event.GetCol()

        # Set default value if no value is set
        if col == 4 and self.punches_grid.GetCellValue(punch, 4) == '':
            if self.punches_grid.GetCellValue(punch, 6) == 'missing':
                punchtime = self.editor.parse_time(FindLastPunchtime(punch))
                if punchtime is not None:
                    # Add 1 second for new punch
                    punchtime += timedelta(seconds=1)
                else:
                    punchtime = str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                wx.CallAfter(self.punches_grid.SetCellValue, punch, col, str(punchtime))
                self._punch_changed = True
            elif col == 4:
                self.punches_grid.SetCellValue(punch, col,
                                               self.punches_grid.GetCellValue(punch, 3))
                self._punch_changed = True

    def ExitPunch(self, event): # wxGlade: EditRunPanel.<event_handler>
        if self._punch_changed:
            self._punch_changed = False
            self.ChangePunch(event)

    def ChangePunch(self, event): # wxGlade: EditRunPanel.<event_handler>
        punch = event.GetRow()
        col = event.GetCol()

        if col == 4:
            try:
                self.editor.set_punchtime(punch,
                                          self.punches_grid.GetCellValue(punch, col).strip())
            except ValueError, msg:
                self.ErrorDialog(str(msg), 'invalid time format')
                event.Veto()
                return 
        elif col == 5:
            self.editor.set_ignore(punch,
                                   self.punches_grid.GetCellValue(punch, col))

    def Rollback(self, event): # wxGlade: EditRunPanel.<event_handler>
        self.editor.rollback()

    def SetRun(self, event): # wxGlade: EditRunPanel.<event_handler>
        index = event.m_itemIndex
        if self.AskApply() == wx.ID_CANCEL:
            self.searchresults.SetItemState(index, 0, wx.LIST_STATE_SELECTED)
        else:
            self.editor.load(self.searchresults.GetItemData(index))

    def AskApply(self):
        if self.editor.changed:
            dlg = wx.MessageDialog(self, 'You have made changes to this run. Do you want to apply these changes now? If you answser "No" the changes will be lost!',
                                   'unapplied changes',
                                   style = wx.YES_NO|wx.CANCEL|wx.ICON_QUESTION)
            answer = dlg.ShowModal()
            dlg.Destroy()
            if answer == wx.ID_YES:
                self.editor.commit()
            elif answer == wx.ID_NO:
                self.editor.rollback()
            return answer
        
    def update(self, observable, event):
        
        try:
            busy = wx.BusyCursor()
            
            # Disable Event handling while updating
            self.SetEvtHandlerEnabled(False)
        
            if type(observable) == RunFinder:
                if self.finder is not None:
                    self.searchresults.DeleteAllItems()
                    results = self.finder.get_results()
                    for row, run in enumerate(results):
                        index = self.searchresults.InsertStringItem(sys.maxint, unicode(run[0]))
                        self.searchresults.SetItemData(index, run[0])
                        for col,v in enumerate(run[0:]):
                            self.searchresults.SetStringItem(index, col, unicode(v))
            
            elif type(observable) == RunEditor and event == 'run':
                self.UpdateRun()
                self.course.SetValue(self.editor.run_course)
                self.override.SetSelection(self.editor.run_override)
                self.readout_time.SetLabel(self.editor.run_readout_time)
                self.card_start_time.SetLabel(self.editor.run_card_start_time)
                self.card_finish_time.SetLabel(self.editor.run_card_finish_time)
                self.manual_start_time.SetValue(self.editor.run_manual_start_time)
                self.manual_finish_time.SetValue(self.editor.run_manual_finish_time)
                self.complete.SetValue(self.editor.run_complete)

                self.runner_number.SetValue(self.editor.runner_number)
                self.runner_given_name.SetValue(self.editor.runner_given_name)
                self.runner_surname.SetValue(self.editor.runner_surname)
                self.runner_dateofbirth.SetValue(self.editor.runner_dateofbirth)
                self.runner_team.SetValue(self.editor.runner_team)

                ctrl_list = (self.run_runner_combo, self.runner_number, self.runner_given_name,
                             self.runner_surname, self.runner_dateofbirth, self.runner_team, self.course,
                             self.manual_start_time, self.manual_finish_time, self.override, self.complete,
                             self.punches_grid)
                if not self.editor.has_run():
                    # Disable all controls if there is no run in the editor
                    for ctrl in ctrl_list:
                        ctrl.Disable()
                else:
                    for ctrl in ctrl_list:
                        ctrl.Enable()

        finally:
            # Enable Event handling after updating
            self.SetEvtHandlerEnabled(True)
            
            # delete the busy cursor even if an exception occurs
            del busy

    @staticmethod
    def UpdateCombo(combo, choice, choice_list):
        combo.Clear()
        choice_index = 0
        for i,c in enumerate(choice_list):
            combo.Append(c[1], c[0])
            if c[0] == choice:
                choice_index = i
        combo.SetSelection(choice_index)

# end of class EditRunPanel


class ReadoutRunPanel(RunPanel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ReadoutRunPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        RunPanel.__init__(self, *args, **kwds)
        self.sizer_17_staticbox = wx.StaticBox(self, -1, "Validation and Scoreing")
        self.sizer_14_staticbox = wx.StaticBox(self, -1, "Run Information")
        self.sizer_11_staticbox = wx.StaticBox(self, -1, "Runner Information")
        self.progress_bar = wx.Gauge(self, -1, 10)
        self.progress_text = wx.StaticText(self, -1, "Reading Card data...")
        self.runner_number = wx.StaticText(self, -1, "101A")
        self.runner_name = wx.StaticText(self, -1, "Gaudenz Steinlin")
        self.runner_team = wx.StaticText(self, -1, u"UBOL 3 \"saugrün\"")
        self.runner_sicard = wx.StaticText(self, -1, "654324")
        self.run_validation = wx.StaticText(self, -1, "OK")
        self.team_validation = wx.StaticText(self, -1, "not yet finished")
        self.run_score = wx.StaticText(self, -1, "1:05:23")
        self.team_score = wx.StaticText(self, -1, "Runs: 21, Time: 9:04:32")
        self.label_8 = wx.StaticText(self, -1, "Course code:")
        self.course = wx.StaticText(self, -1, "LEN5")
        self.run_id = wx.StaticText(self, -1, "1234")
        self.label_5_copy = wx.StaticText(self, -1, "Clear time:")
        self.label_7_copy_2 = wx.StaticText(self, -1, "Check time:")
        self.clear_time = wx.StaticText(self, -1, "2008-05-04 11:02:54")
        self.check_time = wx.StaticText(self, -1, "2008-05-04 11:03:01")
        self.label_7_copy_copy = wx.StaticText(self, -1, "Start time:")
        self.label_7_copy_1_copy = wx.StaticText(self, -1, "Finish time:")
        self.start_time = wx.StaticText(self, -1, "2008-05-04 11:05:29")
        self.finish_time = wx.StaticText(self, -1, "2008-05-04 11:58:01")
        self.punches_grid = wx.grid.Grid(self, -1, size=(1, 1))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        self.update(self.editor,'progress')
        self.update(self.editor, 'run')        

    def __set_properties(self):
        # begin wxGlade: ReadoutRunPanel.__set_properties
        self.runner_number.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_name.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_team.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.runner_sicard.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_validation.SetForegroundColour(wx.Colour(0, 255, 0))
        self.run_validation.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.team_validation.SetForegroundColour(wx.Colour(255, 0, 0))
        self.team_validation.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_score.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.team_score.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.course.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.run_id.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.clear_time.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.check_time.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.start_time.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.finish_time.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.punches_grid.CreateGrid(0, 5)
        self.punches_grid.SetRowLabelSize(30)
        self.punches_grid.SetColLabelSize(30)
        self.punches_grid.EnableEditing(0)
        self.punches_grid.EnableDragColSize(0)
        self.punches_grid.EnableDragRowSize(0)
        self.punches_grid.EnableDragGridSize(0)
        self.punches_grid.SetColLabelValue(0, "Nr.")
        self.punches_grid.SetColLabelValue(1, "Control")
        self.punches_grid.SetColLabelValue(2, "SI")
        self.punches_grid.SetColLabelValue(3, "Punchtime")
        self.punches_grid.SetColLabelValue(4, "")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ReadoutRunPanel.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.StaticBoxSizer(self.sizer_14_staticbox, wx.VERTICAL)
        sizer_18 = wx.GridSizer(6, 2, 0, 0)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_17 = wx.StaticBoxSizer(self.sizer_17_staticbox, wx.VERTICAL)
        sizer_11 = wx.StaticBoxSizer(self.sizer_11_staticbox, wx.VERTICAL)
        sizer_3.Add(self.progress_bar, 0, wx.ALL|wx.EXPAND, 5)
        sizer_3.Add(self.progress_text, 0, wx.ALL, 5)
        label_20_copy_copy = wx.StaticText(self, -1, "Number:")
        sizer_11.Add(label_20_copy_copy, 0, wx.ALL, 2)
        sizer_11.Add(self.runner_number, 0, wx.ALL, 2)
        sizer_11.Add((20, 10), 0, 0, 0)
        label_20_copy_1 = wx.StaticText(self, -1, "Runner:")
        sizer_11.Add(label_20_copy_1, 0, wx.ALL, 2)
        sizer_11.Add(self.runner_name, 0, wx.ALL, 2)
        sizer_11.Add((20, 10), 0, 0, 0)
        label_22_copy = wx.StaticText(self, -1, "Team:")
        sizer_11.Add(label_22_copy, 0, wx.ALL, 2)
        sizer_11.Add(self.runner_team, 0, wx.ALL, 2)
        sizer_11.Add((20, 10), 0, 0, 0)
        label_24_copy = wx.StaticText(self, -1, "SI-Card:")
        sizer_11.Add(label_24_copy, 0, wx.ALL, 2)
        sizer_11.Add(self.runner_sicard, 0, wx.ALL, 2)
        sizer_15.Add(sizer_11, 1, wx.ALL|wx.EXPAND, 5)
        label_4_copy = wx.StaticText(self, -1, "Run Validation:")
        sizer_17.Add(label_4_copy, 0, wx.ALL, 2)
        sizer_17.Add(self.run_validation, 0, wx.ALL, 2)
        sizer_17.Add((10, 10), 1, 0, 0)
        label_6_copy_1 = wx.StaticText(self, -1, "Team Validation:")
        sizer_17.Add(label_6_copy_1, 0, wx.ALL, 2)
        sizer_17.Add(self.team_validation, 0, wx.ALL, 2)
        sizer_17.Add((10, 10), 1, 0, 0)
        label_6_copy_copy = wx.StaticText(self, -1, "Score:")
        sizer_17.Add(label_6_copy_copy, 0, wx.ALL, 2)
        sizer_17.Add(self.run_score, 0, wx.ALL, 2)
        sizer_17.Add((10, 10), 1, 0, 0)
        label_6_copy_copy_copy = wx.StaticText(self, -1, "Team Score:")
        sizer_17.Add(label_6_copy_copy_copy, 0, wx.ALL, 2)
        sizer_17.Add(self.team_score, 0, wx.ALL, 2)
        sizer_15.Add(sizer_17, 1, wx.ALL|wx.EXPAND, 5)
        sizer_12.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_18.Add(self.label_8, 0, wx.ALL, 2)
        label_24_copy_copy = wx.StaticText(self, -1, "Run ID:")
        sizer_18.Add(label_24_copy_copy, 0, wx.ALL, 2)
        sizer_18.Add(self.course, 0, wx.ALL, 2)
        sizer_18.Add(self.run_id, 0, wx.ALL, 2)
        sizer_18.Add(self.label_5_copy, 0, wx.ALL, 2)
        sizer_18.Add(self.label_7_copy_2, 0, wx.ALL, 2)
        sizer_18.Add(self.clear_time, 0, wx.ALL, 2)
        sizer_18.Add(self.check_time, 0, wx.ALL, 2)
        sizer_18.Add(self.label_7_copy_copy, 0, wx.ALL, 2)
        sizer_18.Add(self.label_7_copy_1_copy, 0, wx.ALL, 2)
        sizer_18.Add(self.start_time, 0, wx.ALL, 2)
        sizer_18.Add(self.finish_time, 0, wx.ALL, 2)
        sizer_14.Add(sizer_18, 0, wx.EXPAND, 0)
        sizer_14.Add((20, 20), 0, 0, 0)
        sizer_14.Add(self.punches_grid, 1, wx.EXPAND, 0)
        sizer_12.Add(sizer_14, 1, wx.ALL|wx.EXPAND, 5)
        sizer_3.Add(sizer_12, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        # end wxGlade

    def update(self, observable, event):
        
        try:
            busy = wx.BusyCursor()
        
            # Disable Event handling while updating
            self.SetEvtHandlerEnabled(False)
        
            if type(observable) == RunEditor and event == 'run':
                self.UpdateRun()

                self.runner_number.SetLabel(self.editor.runner_number)
                self.runner_name.SetLabel(self.editor.runner_name)
                self.runner_team.SetLabel(self.editor.runner_team)

                self.start_time.SetLabel(self.editor.run_start_time[11:])
                self.finish_time.SetLabel(self.editor.run_finish_time[11:])
                self.course.SetLabel(self.editor.run_course)
                
                if (self.editor.has_runner() == False
                    or self.editor.has_course() == False):
                    # stop reader
                    self.editor.stop_reader()
                    # change to edit run page
                    self.GetParent().SetSelection(0)
                    
            elif type(observable) == RunEditor and event == 'progress':
                p = observable.progress
                self.progress_bar.SetValue(p[0])
                self.progress_text.SetLabel(p[1])
                wx.Yield()
            
        finally:
            # Enable Event handling after updating
            self.SetEvtHandlerEnabled(True)
            
            # delete the busy cursor even if an exception occurs
            del busy

# end of class ReadoutRunPanel


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    main_frame = RunEditorFrame(None, -1, "")
    app.SetTopWindow(main_frame)
    main_frame.Show()
    app.MainLoop()
