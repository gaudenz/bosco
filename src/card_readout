#!/usr/bin/env python
#
#    Copyright (C) 2008  Gaudenz Steinlin <gaudenz@soziologie.ch>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
cardreadout - GUI for SI Card readout station
@todo: Add 'registration mode' checkmox and don't store punches and don't complete
       run in this mode.
"""

import wx, wx.lib.masked
from storm.locals import *
from optparse import OptionParser
from datetime import datetime, timedelta
import re, os

from run import Run, RunException
from runner import Runner, SICard
from course import SIStation, Course
from sireader import SIReaderReadout, SIReaderException
from ranking import SequenceCourseValidationStrategy, ValidationStrategy, Relay24hScoreingStrategy, Relay12hScoreingStrategy
from importer import SIRunExporter
import conf

class SIReadoutFrame(wx.Frame):

    def __init__(self, store, port, backup_fname, *args, **kwargs):
        super(type(self), self).__init__(*args, **kwargs)

        self._store = store
        self._run = None
        self._reset_timer = None
        
        # Set Icon
        icon = wx.Icon('sicard.xpm', wx.BITMAP_TYPE_XPM)
        self.SetIcon(icon)
        
        panel = wx.Panel(self, -1)

        # course save button
        self._save_button = wx.Button(panel, wx.ID_SAVE)
        self.Bind(wx.EVT_BUTTON, self.SaveRun, self._save_button)
        self._save_button.Disable()

        # Add punch button
        self._punch_button = wx.Button(panel, label='Add Punch...')
        self.Bind(wx.EVT_BUTTON, self.AddPunch, self._punch_button)
        self._punch_button.Disable()
        
        # backup file label and button
        backup_label = wx.StaticText(panel, label='Backup file:')
        self._backup_file_label = wx.StaticText(panel, label = '')
        self._backup_file_label.SetFont(wx.Font(6, wx.DEFAULT, wx.NORMAL,
                                                wx.NORMAL))
        backup_button = wx.Button(panel, label='Select backup file...')
        self.Bind(wx.EVT_BUTTON, self.BackupDlg, backup_button)
        
        # connect reader button
        connect_button = wx.Button(panel, label = 'Connect SI Reader...')
        self.Bind(wx.EVT_BUTTON, self.ConnectReader, connect_button)
        
        # exit button
        exit_button = wx.Button(panel, wx.ID_EXIT)
        self.Bind(wx.EVT_BUTTON, self.OnClose, exit_button)

        # text fields for runner information
        self._runner_nr = wx.StaticText(panel, label = '')
        self._runner_name = wx.StaticText(panel, label = '')
        self._runner_cardnr = wx.StaticText(panel, label = '')
        for ctrl in [self._runner_nr, self._runner_name, self._runner_cardnr]:
            ctrl.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD))
        runner_box = wx.StaticBoxSizer(wx.StaticBox(panel, label = 'Runner information'),
                                       wx.HORIZONTAL)
        runner_box.Add(self._runner_nr, 1)
        runner_box.Add(self._runner_name, 3)
        runner_box.Add(self._runner_cardnr, 1, flag=wx.ALIGN_RIGHT)

        # text fields and input for run information
        course_label = wx.StaticText(panel, label = 'Run code:')
        self._course_input = wx.TextCtrl(panel, style=wx.TE_PROCESS_ENTER)
        self._course_input.SetFocus()
        self.Bind(wx.EVT_TEXT, self.SetCourse, self._course_input)
        self.Bind(wx.EVT_TEXT_ENTER, self.SaveRun, self._course_input)
        self._course_input.Disable()
        run_label = wx.StaticText(panel, label = 'Run validation:')
        self._validation_info_run = wx.StaticText(panel, label = '')
        self._validation_info_run.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.BOLD))
        team_label = wx.StaticText(panel, label = 'Team validation:')
        self._validation_info_team = wx.StaticText(panel, label = '')
        self._validation_info_team.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.BOLD))
        run_box = wx.StaticBoxSizer(wx.StaticBox(panel, label = 'Run information'),
                                    wx.HORIZONTAL)
        run_box.Add(course_label, 0,
                    flag = wx.ALIGN_CENTER_VERTICAL | wx.ALL, border = 2)
        run_box.Add(self._course_input, 0,
                    flag = wx.ALIGN_CENTER_VERTICAL | wx.ALL, border = 2)
        run_box.Add((0,0), 1)
        run_box.Add(run_label, 0,
                    flag = wx.ALIGN_CENTER_VERTICAL | wx.ALL, border = 2)
        run_box.Add(self._validation_info_run, 0,
                    flag = wx.ALIGN_CENTER_VERTICAL | wx.ALL, border = 2)
        run_box.Add((0,0), 1)        
        run_box.Add(team_label, 0,
                    flag=wx.ALIGN_CENTER_VERTICAL | wx.ALL, border = 2)
        run_box.Add(self._validation_info_team, 0,
                    flag = wx.ALIGN_CENTER_VERTICAL | wx.ALL, border = 2)

        # text fields for additional information
        self._punches_info = wx.StaticText(panel, label='')
        punches_box = wx.StaticBoxSizer(wx.StaticBox(panel, label='Punches'),
                                        wx.VERTICAL)
        punches_box.Add(self._punches_info)
        self._missing_info = wx.StaticText(panel, label='')
        missing_box = wx.StaticBoxSizer(wx.StaticBox(panel, label='Missing controls'),
                                        wx.VERTICAL)
        missing_box.Add(self._missing_info)
        self._additional_info = wx.StaticText(panel, label='')
        additional_box = wx.StaticBoxSizer(wx.StaticBox(panel, label='Additional punches'),
                                           wx.VERTICAL)
        additional_box.Add(self._additional_info)
        for ctrl in [self._punches_info, self._missing_info, self._additional_info]:
            ctrl.SetFont(wx.Font(8, wx.MODERN, wx.NORMAL, wx.NORMAL))

        add_info_r_sizer = wx.BoxSizer(wx.VERTICAL)
        add_info_r_sizer.Add(missing_box, 1, flag=wx.EXPAND | wx.BOTTOM, border = 2)
        add_info_r_sizer.Add(additional_box, 1, flag=wx.EXPAND | wx.TOP, border = 2)

        add_info_sizer = wx.BoxSizer(wx.HORIZONTAL)
        add_info_sizer.Add(punches_box, 1, flag=wx.EXPAND | wx.RIGHT, border = 2)
        add_info_sizer.Add(add_info_r_sizer, 1, flag=wx.EXPAND | wx.LEFT, border = 2)

        # position all run information elements
        run_info_sizer = wx.BoxSizer(wx.VERTICAL)
        run_info_sizer.Add(runner_box,0, flag=wx.EXPAND | wx.ALL, border=5)
        run_info_sizer.Add(run_box, 0, flag=wx.EXPAND | wx.ALL, border=5)
        run_info_sizer.Add(add_info_sizer, 1, flag=wx.EXPAND | wx.ALL, border = 5)
                
        # Position elements
        ctrl_sizer = wx.BoxSizer(wx.VERTICAL)
        ctrl_sizer.Add((0,7),0)
        ctrl_sizer.Add(self._save_button, 0, flag=wx.EXPAND|wx.ALL, border = 5)
        ctrl_sizer.Add(self._punch_button, 0, flag=wx.EXPAND|wx.ALL, border = 5)
        ctrl_sizer.Add((0,0), 1, flag=wx.EXPAND)
        ctrl_sizer.Add(backup_label, 0, flag=wx.EXPAND|wx.TOP|wx.LEFT|wx.RIGHT,
                       border = 5)
        ctrl_sizer.Add(self._backup_file_label, 0, flag=wx.EXPAND|wx.ALL, border =5)
        ctrl_sizer.Add(backup_button, 0,flag=wx.EXPAND|wx.ALL, border = 5)
        ctrl_sizer.Add(connect_button, 0,flag=wx.EXPAND|wx.ALL, border = 5)
        ctrl_sizer.Add(exit_button, 0,flag=wx.EXPAND|wx.ALL, border = 5)

        
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(run_info_sizer, 1, flag=wx.EXPAND)
        sizer.Add(ctrl_sizer, 0, flag=wx.EXPAND)

        sizer.SetSizeHints(panel)
        panel.SetSizer(sizer)
        
        # Set up Status bar
        self._status_bar = wx.StatusBar(self)
        self._status_bar.SetFieldsCount(2)
        self._status_bar.SetStatusWidths([-1, 100])
        self.SetStatusBar(self._status_bar)

        # Add timer to periodically poll the si reader
        self.Bind(wx.EVT_TIMER, self.OnTimer)
        self._timer = wx.Timer(self)
        self._timer.Start(milliseconds=1000, oneShot=False)
        self.Bind(wx.EVT_CLOSE, self.OnWindowClose)

        # Set up sireader
        self._sireader = None
        if port is None:
            self.ConnectReader(None)
        else:
            self._set_reader_port(port)

        # Set up backup file
        self._set_backup_file(backup_fname)
        
        (px, py) = panel.GetSize()
        (sx, sy) = self._status_bar.GetSize()
        self.SetClientSize((px+sx, py+sy))

        self.Show(True)
        
    def OnClose(self, event):
        self.Close(True)

    def OnWindowClose(self, event):
        self._timer.Stop()
        del self._timer
        del self._sireader
        self.Destroy()
        
    def OnTimer(self, event):
        """Called on a time event."""

        if self._sireader is None:
            return True

        try:
            if self._sireader.poll_sicard():
                if self._sireader.sicard:
                    # SI Card inserted
                    if self._reset_timer is not None:
                        self._reset_timer.Stop()
                        
                    self._status_bar.SetStatusText('Reading SI Card %s (%s)...' % (self._sireader.sicard, self._sireader.cardtype), 0)
                    card_data = self._sireader.read_sicard()
                    text = ''
                    for i, p in enumerate(card_data['punches']):
                        text += '%2s\t%3s\t%s\n' % (i, p[0], p[1])
                    self.MakeRun(card_data)
                    self.UpdateInfo()
                else:
                    # SI Card removed
                    if not self._run is None:
                        self._store.rollback()
                        self._run = None
                    self._status_bar.SetStatusText('SI Card removed.', 0)
                    self._reset_timer = wx.FutureCall(5000, self.ResetStatusBar)
        except SIReaderException, msg:
            self.ErrorDialog('Lost Connection to SI Reader!\n%s' % msg, 'lost connection')
            self._set_reader_port(None)

    def ResetStatusBar(self):
        self._status_bar.SetStatusText('Waiting for SI Card...', 0)
        self.UpdateInfo()
        self._reset_timer = None

    def GetSICard(self, cardnr):
        sicard = self._store.get(SICard, cardnr)
        if sicard is not None:
            return sicard
        runners = self._store.find(Runner).order_by('number')
        dlg = wx.SingleChoiceDialog(self,
                                    'Select runner for SI Card %s' % self._sireader.sicard,
                                    'Select runner',
                                    ['%s: %s %s' % (r.number, r.given_name, r.surname)
                                     for r in runners ],
                                    )
        if dlg.ShowModal() == wx.ID_OK:
            sicard = SICard(cardnr)
            runners[dlg.GetSelection()].sicards.add(sicard)
            return sicard

        return None

    def MakeRun(self, card_data):

        # search for incomplete run with this sicard
        result = self._store.find(Run,
                                  Run.sicard == card_data['card_number'],
                                  Run.complete == False)
        if result.count() > 1:
            self.ErrorDialog('More than one open run for this SI Card! Creating new run.',
                             'multiple open runs')
        elif result.count() == 1:
            self._run = result.one()
        
        if self._run is None:
            # Search for SICard
            sicard = self.GetSICard(card_data['card_number'])
            if sicard is None:
                self.ErrorDialog('You have to assign a runner to this SI Card! Remove and reinsert card to proceeed.',
                                 'No SI Card not assigned')
                return False
            self._run = self._store.add(Run(sicard))
        try:
            self._run.add_punchlist(card_data['punches'])
        except RunException, msg:
            self.ErrorDialog(str(msg), 'Error reading SI Card')

        self.UpdateInfo()
        
    def SetCourse(self, event):

        if self._run is None:
            return False
        code = self._course_input.GetValue().upper().strip()
        runs = self._store.find(Run,
                                Run.course == Course.id,
                                Run.sicard == self._run.sicard,
                                Course.code.like(code),
                                Not(Run.id == self._run.id))
        if runs.count() > 0:
            self.ErrorDialog('Another run with this SI Card for this course exists. The old run will be overwritten if you save this run.',
                             'run already exists')
            for run in runs:
                for punch in run.punches:
                    self._store.remove(punch)
                    self._store.add_flush_order(punch, run)
                self._store.remove(run)
                    
        try:
            self._run.set_coursecode(code)
            self._run.complete = True
        except RunException, msg:
            self._run.complete = False
            self._run.set_coursecode(None)

        self.UpdateInfo()
        return True

    def SaveRun(self, event):
        """Commits the current run to the database and clears self._run."""

        if self._run is None or not self._run.complete:
            return False

        try:
            if self._backup is not None:
                self._backup.export_run(self._run)
        except Exception, msg:
            self.ErrorDialog(str(msg), 'Error while writing backup file')
            return False
        
        try:
            self._store.commit()
            self._run = None
        except Exception, msg:
            self.ErrorDialog(str(msg), 'Error while saveing run')
            return False

        self._save_button.Disable()
        self._sireader.ack_sicard()
        return True

    def _format_si(self, sistation):
        if sistation.control is not None:
            return '%3s     ' % sistation.control.code
        else:
            return '%3s %4s' % (sistation.id, '(si)')
        
    def UpdateInfo(self):

        if self._run is None:
            # Clear all fields
            for field in [self._runner_nr, self._runner_name, self._runner_cardnr,
                          self._validation_info_run, self._validation_info_team,
                          self._punches_info, self._missing_info, self._additional_info]:
                field.SetLabel('')
            self._course_input.Disable()
            self._course_input.SetValue('')
            self._save_button.Disable()
            self._punch_button.Disable()
        else:
            # set runner information
            self._runner_nr.SetLabel(self._run.sicard.runner.number)
            self._runner_name.SetLabel('%s %s' % (self._run.sicard.runner.given_name,
                                              self._run.sicard.runner.surname))
            self._runner_cardnr.SetLabel(str(self._run.sicard.id))

            # set run information
            if self._run.course is not None:
                self._course_input.SetValue(self._run.course.code)
                (valid, info) = SequenceCourseValidationStrategy(self._run.course).validate(self._run)
                if valid == ValidationStrategy.OK:
                    self._validation_info_run.SetLabel('OK')
                    self._validation_info_run.SetForegroundColour('Green')
                else:
                    self._validation_info_run.SetLabel('FAILED')
                    self._validation_info_run.SetForegroundColour('Red')

                # add missing controls and additional punches info
                text = ''
                for c in info['missing']:
                    text += '%s\n' % c.code
                self._missing_info.SetLabel(text)

                text = ''
                for p in info['additional']:
                    text += '%8s %s\n' % (self._format_si(p.sistation), p.punchtime)
                self._additional_info.SetLabel(text)
                
                # Activate save button
                self._save_button.Enable()
            else:
                # clear course validation info
                for ctrl in [self._validation_info_run, self._missing_info,
                             self._additional_info ]:
                    ctrl.SetLabel('')
                # Deactivate save button
                self._save_button.Disable()

            self._course_input.Enable()
            self._course_input.SetFocus()
            self._punch_button.Enable()

            # set punch information
            text = ''
            for i,p in enumerate(self._run.punches.order_by('punchtime')):
                text += '%2s %8s %s\n' % (i+1, self._format_si(p.sistation), p.punchtime)
            self._punches_info.SetLabel(text)
    
    def ConnectReader(self, event):
        if self._set_reader_port(error_dlg = False):
                return
            
        dlg = wx.TextEntryDialog(self, 'SI Reader serial port:', 'Connect SI Reader')

        if dlg.ShowModal() == wx.ID_OK:
            port = dlg.GetValue()
            self._set_reader_port(port)

    def AddPunch(self, event):
        dlg = wx.Dialog(self, title='Add punch')

        # create controls
        sistations_label = wx.StaticText(dlg, label='Select SI Station:')
        sistations_list = wx.ListBox(dlg)
        for si in self._store.find(SIStation).order_by('id'):
            if si.control is None:
                sistations_list.Append('%s\t(no control)' % si.id, si.id)
            else:
                sistations_list.Append('%s\t(control: %3s)' % (si.id, si.control.code),
                                       si.id)
        time_label = wx.StaticText(dlg, label='Set time for punch:')
        time_select = wx.lib.masked.TimeCtrl(dlg, fmt24hr=True)
        time_select.SetValue(wx.DateTime_Now())
        spin = wx.SpinButton(dlg, size = (-1, time_select.GetSize().height),
                             style = wx.SP_VERTICAL)
        time_select.BindSpinButton(spin)

        # Layout dialog
        sizer = wx.GridBagSizer(3,2)
        sizer.Add(sistations_label, (0,0), flag = wx.TOP | wx.LEFT | wx.RIGHT, border = 5)
        sizer.Add(sistations_list, (1,0), flag = wx.ALL, border = 5)
        time_sizer = wx.BoxSizer(wx.HORIZONTAL)
        time_sizer.Add(time_select)
        time_sizer.Add(spin)
        sizer.Add(time_label, (0,1), flag = wx.TOP | wx.LEFT | wx.RIGHT, border = 5)
        sizer.Add(time_sizer, (1,1), flag = wx.ALL, border = 5)
        sizer.Add(wx.Button(dlg, wx.ID_CANCEL),(2,0), flag = wx.ALL, border = 5)
        sizer.Add(wx.Button(dlg, wx.ID_OK),(2,1), flag = wx.ALL, border = 5)
        dlg.SetSizerAndFit(sizer)
        
        if dlg.ShowModal() == wx.ID_OK:
            timespan = timedelta(seconds = time_select.GetValue(as_wxTimeSpan=True).GetSeconds())
            now = datetime.now()
            ref_day = now.replace(hour=0, minute=0, second=0, microsecond=0, tzinfo=None)
            ref_hour = now - ref_day
            if timespan < ref_hour:
                # punchtime on the same day
                punchtime = ref_day + timespan
            else:
                # punchtime on the previous day
                punchtime = ref_day - timedelta(days=1) + timespan
                
            self._run.add_punch((sistations_list.GetClientData(sistations_list.GetSelection()),
                                 punchtime))
            self.UpdateInfo()
            
        
    def BackupDlg(self, event):
        dlg = wx.FileDialog(self, message='Choose backup file...',
                            defaultDir=os.getcwd(),
                            wildcard = 'Comma Separated File (*.csv)|*.csv|' \
                                       'All Files (*.*)|*|',
                            style=wx.OPEN | wx.CHANGE_DIR)
        
        if dlg.ShowModal() == wx.ID_OK:
            self._set_backup_file(dlg.GetPath())
        else:
            self._set_backup_file(None)
            
    def _set_backup_file(self, fname):
        if fname is not None:
            try:
                self._backup = SIRunExporter(fname)
            except Exception, msg:
                self.ErrorDialog(str(msg), 'Error opening backup file')
        else:
            self._backup = None

        self._backup_file_label.SetLabel(fname or '')

    def _set_reader_port(self, port = None, error_dlg = True):
        self._sireader = None
        try:
            self._sireader = SIReaderReadout(port)
            port = self._sireader.port
        except SIReaderException, msg:
            if error_dlg:
                self.ErrorDialog(str(msg), 'Could not connect to SI Reader')
            port = None
            self._sireader = None
                
        if port is None:
            self._status_bar.SetStatusText('Connect SI Reader first!', 0)
            self._status_bar.SetStatusText('not connected', 1)
            return False
        else:
            self._status_bar.SetStatusText('Waiting for SI Card...', 0)
            self._status_bar.SetStatusText(port, 1)
            return True

        
    def ErrorDialog(self, msg, title):
        dlg =  wx.MessageDialog(self, msg, title,
                                wx.OK | wx.ICON_ERROR)
        dlg.ShowModal()
        dlg.Destroy()


if __name__ == '__main__':
    # Read program options
    opt = OptionParser(usage = 'usage: %prog [options]', 
                       description = 'Read out SI Cards')
    opt.add_option('-p', '--port', action='store', default=None,
                   help='Port connected to the SI Base Station')
    opt.add_option('-b', '--backup', action='store', default=None,
                   help='Backup file for all data readout')
    (options, args) = opt.parse_args()


    app = wx.App()
    frame = SIReadoutFrame(conf.store, options.port, options.backup,
                           None, title = "SI Card Auslesen")
    app.MainLoop()
